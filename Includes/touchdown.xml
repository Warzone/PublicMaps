<map>
<!-- Touchdown gamemode include file -->
<!-- XML by zzuf, arcadeboss, MewTwoKing, Furrie, TommyHillfigger, KuNet, honeyfuggle & mameBT -->
<!-- Version 2025.08.08-1 -->
<game>Touchdown</game>
<gamemode>ffb</gamemode>
<objective>Capture the flag at the end zone on the enemies' side!</objective>
<constants fallback="true">
    <!-- game_state & player_state -->
    <constant id="initial">0</constant>
    <constant id="carry">1</constant>
    <constant id="throw">2</constant>
    <!-- Additional player_state value -->
    <constant id="catch">3</constant>
    <!-- Additional game_state value -->
    <constant id="death">4</constant>
    <!-- Maps need to define the following constants -->
    <!--
    <constant id="team-size"></constant>
    <constant id="team-one-name"></constant>
    <constant id="team-two-name"></constant>
    <constant id="team-one-color"></constant>
    <constant id="team-two-color"></constant>
    <constant id="team-one-spawn"></constant>
    <constant id="team-one-yaw"></constant>
    <constant id="team-one-pitch"></constant>
    <constant id="team-two-spawn"></constant>
    <constant id="team-two-yaw"></constant>
    <constant id="flag-post"></constant>
    -->
    <!-- If maps want to have team-specific flag posts, they must also define: -->
    <!--
    <constant id="team-one-flag-post"></constant>
    <constant id="team-two-flag-post"></constant>
    -->
    <!-- Maps may want to consider changing these options -->
    <constant id="void-plane">-64</constant>
    <constant id="enable-night-vision">false</constant>
    <constant id="deny-endzone-entry">false</constant>
    <constant id="flag-yaw" delete="true"/>
    <!-- These can be changed for certain variants based on intent -->
    <constant id="max-overfill" delete="true"/>
    <constant id="time-limit">8m</constant>
    <constant id="flag-respawn">5s</constant>
    <constant id="flag-prerespawn">4.8s</constant> <!-- Should be 0.2s, or 1 tick, less than respawn -->
    <constant id="respawn-timer">3s</constant>
    <constant id="dynamic-instaheal">false</constant>
    <constant id="enable-instaheal">true</constant> <!-- requires dynamic to be false -->
    <constant id="instaheal-required">8</constant>
    <!-- Maps can define these if needed, but these are sane defaults -->
    <constant id="team-one-pitch">0</constant>
    <constant id="team-two-pitch">0</constant>
    <constant id="pre-round-time">5s</constant>
    <constant id="main-kit">main-kit</constant>
    <constant id="armor-kit">armor-kit</constant>
    <constant id="flag-carrier-kit">flag-carrier-kit</constant>
    <constant id="flag-carrier-effects">flag-carrier-effects</constant>
    <constant id="fire-material">fire</constant>
    <constant id="flag-color">white</constant>
    <constant id="deny-block-interaction">true</constant>
    <constant id="overtime-default">1</constant> <!-- 0: no overtime; 1: PGM default; 2: Tiebreaker mode -->
    <constant id="mercy-limit">-1</constant>
    <constant id="indicator-outer-material">sea lantern</constant>
    <!-- Experimental or alternate options -->
    <constant id="team-flag-posts">false</constant>
    <constant id="gridiron-engine">false</constant>
    <unless constant="gridiron-engine" constant-value="true">
        <constant id="score-display">circle</constant>
        <constant id="score-points">1</constant>
        <constant id="score-limit">5</constant>
    </unless>
    <if constant="gridiron-engine" constant-value="true">
        <constant id="score-display" delete="true"/>
        <constant id="score-points">7</constant>
        <constant id="score-limit">-1</constant>
    </if>
    <constant id="melee-weapon">stone sword</constant>
    <constant id="natural-regeneration">true</constant>
    <constant id="inner-indicator-materials">false</constant>
    <if constant="inner-indicator-materials" constant-value="true">
        <constant id="indicator-inner-material">sea lantern</constant>
    </if>
    <constant id="gapple-heal-duration">5s</constant>
</constants>
<include id="void-death"/>
<include id="gapple-kill-reward"/>
<time result="score" overtime="1m" max-overtime="1m">${time-limit}</time>
<broadcasts>
    <tip after="10s" every="70s">You can `6pass`r to your teammates by throwing the Football!</tip>
    <tip after="25s" every="2m">Score by running into the end zone on the enemies' side!</tip>
</broadcasts>
<teams>
    <team id="team-one" color="${team-one-color}" max="${team-size}" max-overfill="${max-overfill}">${team-one-name}</team>
    <team id="team-two" color="${team-two-color}" max="${team-size}" max-overfill="${max-overfill}">${team-two-name}</team>
</teams>
<kits>
    <kit id="heal-instant">
        <effect duration="0.2s">instant health</effect>
    </kit>
    <kit id="heal-gapple" force="true">
        <effect duration="${gapple-heal-duration}">absorption</effect>
        <effect duration="${gapple-heal-duration}" amplifier="2">regeneration</effect>
    </kit>
    <kit id="main-kit">
        <clear items="true" armor="false" effects="false"/>
        <item slot="0" unbreakable="true" material="${melee-weapon}"/>
        <item slot="8" material="golden apple"/>
        <if constant="enable-night-vision" constant-value="true">
            <effect>night vision</effect>
        </if>
        <game-mode>adventure</game-mode>
    </kit>
    <kit id="armor-kit" force="true">
        <clear items="false" armor="true" effects="false"/>
        <helmet unbreakable="true" team-color="true" locked="true" material="leather helmet"/>
        <chestplate unbreakable="true" team-color="true" locked="true" material="leather chestplate"/>
        <leggings unbreakable="true" locked="true" material="chainmail leggings"/>
        <boots unbreakable="true" locked="true" material="iron boots"/>
    </kit>
    <kit id="football-kit">
        <item prevent-sharing="true" consumable="use-snowball" name="`4`lFootball" material="snowball"/>
    </kit>
    <kit id="flag-carrier-kit" force="true">
        <kit id="main-kit"/>
        <kit id="football-kit"/>
        <chestplate unbreakable="true" locked="true" color="FFFFFF" material="leather chestplate"/>
        <leggings unbreakable="true" locked="true" team-color="true" material="leather leggings"/>
        <boots unbreakable="true" team-color="true" locked="true" material="leather boots"/>
    </kit>
    <kit id="flag-carrier-effects">
        <unless constant="enable-night-vision" constant-value="true">
            <effect>night vision</effect>
        </unless>
        <effect>slowness</effect>
        <effect duration="3s">fire resistance</effect>
        <max-health>14</max-health>
    </kit>
    <kit id="pre-round-kit" force="true">
        <effect>invisibility</effect>
        <effect amplifier="255">slow digging</effect>
    </kit>
    <kit id="pre-round-reset-kit" force="true">
        <clear items="false" armor="true" effects="false"/>
        <action>
            <set var="player.fire_ticks" value="-20"/>
        </action>
        <effect duration="0s">absorption</effect>
        <effect duration="1s" amplifier="20">regeneration</effect>
    </kit>
    <kit id="default-kit">
        <book show-other="false">
            <title>`e`lHow to Play</title>
            <author>MewTwoKing</author>
            <pages>
                <page>
                    `2» `lTOUCHDOWN
                    `2» Overview`0

                    Each team has a
                    `6score box`0 located
                    on the other side of
                    the map.

                    Players must first
                    `6touch`0 the flag,
                    located at the center
                    of the map, and run to
                    the enemy team's side
                    to capture!
                </page>
                <page>
                    `2» `lTOUCHDOWN
                    `2» Passing (1/2)`0

                    The player with the
                    flag gets a `6snowball`0,
                    which can be thrown to
                    `6pass`0 the flag to the
                    player it hits.

                    If the snowball `6misses`0,
                    the flag will simply
                    respawn at the center.
                </page>
                <page>
                    `2» `lTOUCHDOWN
                    `2» Passing (2/2)`0

                    Caution: enemies can
                    `6intercept`0 the flag if
                    they are hit by the
                    snowball you throw!

                    Passing is a core part
                    of this game; use it to
                    make `6strategic`0 plays
                    and beat the enemy!
                </page>
            </pages>
        </book>
        <if constant="enable-night-vision" constant-value="true">
            <effect>night vision</effect>
        </if>
    </kit>
    <give kit="default-kit" filter="observing"/>
    <give kit="${main-kit}" filter="during-buytime"/>
    <lend kit="pre-round-kit" filter="on-buytime"/>
    <give kit="pre-round-reset-kit" filter="on-buytime"/>
    <give kit="${armor-kit}" filter="not-on-buytime"/>
    <give kit="football-kit" filter="dropped-football"/>
</kits>
<spawns>
    <spawn team="team-one" kit="${main-kit}" yaw="${team-one-yaw}" pitch="${team-one-pitch}" region="team-one-spawn"/>
    <spawn team="team-two" kit="${main-kit}" yaw="${team-two-yaw}" pitch="${team-two-pitch}" region="team-two-spawn"/>
</spawns>
<consumables>
    <consumable id="use-snowball" on="right click" override="false" action="snowball-thrown" consume="false"/>
</consumables>
<variables>
    <timelimit id="time_limit"/>
    <score id="team_score"/>
    <with-team id="team_one_score" var="team_score" team="team-one"/>
    <with-team id="team_two_score" var="team_score" team="team-two"/>
    <variable id="game_state" scope="match" default="${initial}"/>
    <variable id="can_score" scope="match" default="1"/>
    <variable id="round_status" scope="match" default="2"/>
    <variable id="buytime" scope="match" default="0"/>
    <variable id="do_fire" scope="match" default="0"/>
    <variable id="overtime" scope="match" default="${overtime-default}"/>
    <variable id="scoring_team" scope="match" default="0"/>
    <variable id="player_state" scope="player" default="${initial}" exclusive="1"/>
    <variable id="player_score" scope="player" default="0"/>
    <variable id="current_team" scope="player" default="0"/>
    <variable id="goal_scorer" scope="player" exclusive="1"/>
    <variable id="flag_carrier" scope="player" exclusive="1"/>
    <variable id="instaheal" scope="match" default="0"/>
</variables>
<filters>
    <any id="snowball-entity">
        <entity>snowball</entity>
        <entity>dropped item</entity>
    </any>
    <time id="in-overtime">${time-limit}</time>
    <not id="not-barrier">
        <material>barrier</material>
    </not>
    <!-- flag-pickup-via-entity handles cases where the flag carrier disconnects mid-game.
    <! - If a flag-carrier disconnects, the snowball in their inventory drops onto the ground,
    <! - meaning if a player picks up that snowball, it should be treated as a flag pickup. -->
    <all id="flag-pickup-via-entity">
        <carrying id="carrying-football">
            <item prevent-sharing="true" consumable="use-snowball" name="`4`lFootball" material="snowball"/>
        </carrying>
        <not>
            <carrying-flag id="has-flag">flag</carrying-flag>
        </not>
    </all>
    <all id="died-carrying">
        <variable var="player_state">${carry}</variable>
        <dead/>
    </all>
    <all id="dropped-football">
        <filter id="has-flag"/>
        <variable var="player_state">${carry}</variable>
        <not>
            <filter id="carrying-football"/>
        </not>
        <alive/>
        <variable var="can_score">1</variable>
    </all>
    <after id="flag-fire-go" filter="do_fire=1" duration="1s"/>
    <!-- These two delays allow players to hear the sounds, otherwise gets cut-off when TP'd -->
    <after id="match-start-delay" filter="match-started" duration="0.1s"/>
    <after id="pre-round-reset" filter="all(can_score=0,not(match-finished))" duration="0.1s"/>
    <after id="flag-reset-after-throw" duration="${flag-respawn}" filter="game_state=${throw}" message="`b» `fFlag will respawn in {0} `b«"/>
    <after id="flag-reset-after-death" duration="${flag-respawn}" filter="game_state=${death}" message="`b» `fFlag will respawn in {0} `b«"/>
    <after id="just-before-reset" duration="${flag-prerespawn}" filter="any(game_state=${throw},game_state=${death})"/>
    <all id="valid-receive">
        <cause id="got-shot">projectile</cause>
        <attacker>
            <variable var="player_state">${catch}</variable>
        </attacker>
    </all>
    <all id="valid-pass">
        <variable var="player_state">${throw}</variable>
        <victim>
            <cause>projectile</cause>
        </victim>
        <victim>
            <region id="playing-field"/>
        </victim>
    </all>
    <victim id="victim-has-flag">
        <variable var="player_state">${carry}</variable>
    </victim>
    <allow id="flag-carrier-alive">
        <all>
            <variable var="player_state">${carry}</variable>
            <alive/>
        </all>
    </allow>
    <all id="reset-observer-variables">
        <observing/>
        <variable var="player_state">${carry}</variable>
    </all>
    <all id="team-one-scored">
        <team>team-one</team>
        <region id="team-two-portal"/>
        <variable var="can_score">1</variable>
        <variable var="player_state">${carry}</variable>
        <match-running/>
        <alive/>
    </all>
    <all id="team-two-scored">
        <team>team-two</team>
        <region id="team-one-portal"/>
        <variable var="can_score">1</variable>
        <variable var="player_state">${carry}</variable>
        <match-running/>
        <alive/>
    </all>
    <variable id="round-0" var="round_status">0</variable>
    <variable id="round-1" var="round_status">1</variable>
    <all id="should-teleport">
        <variable var="can_score">0</variable>
        <match-running/>
        <alive/>
    </all>
    <variable id="cant-score" var="can_score">0</variable>
    <variable id="can-score" var="can_score">1</variable>
    <after id="after-round-1" duration="0.05s" filter="round-1"/>
    <after id="after-round-0" duration="0.05s" filter="round-0"/>
    <all id="during-buytime">
        <after duration="0.05s" filter="on-buytime"/>
        <not>
            <below y="${void-plane}"/>
        </not>
    </all>
    <variable id="round-2" var="round_status">2</variable>
    <any id="remove-entities">
        <entity>dropped item</entity>
    </any>
    <all id="on-buytime">
        <variable var="buytime">1</variable>
        <alive/>
    </all>
    <after id="not-on-buytime-after" duration="0.05s">
        <all id="not-on-buytime">
            <variable var="buytime">0</variable>
            <alive/>
        </all>
    </after>
    <all id="team-one-buytime">
        <team>team-one</team>
        <filter id="on-buytime"/>
    </all>
    <all id="team-two-buytime">
        <team>team-two</team>
        <filter id="on-buytime"/>
    </all>
    <after id="cage-time" message="`a» `fNext round begins in {0} `a«" duration="${pre-round-time}">
        <all>
            <filter id="round-0"/>
            <match-running/>
        </all>
    </after>
    <after id="after-capture" duration="${flag-respawn}">
        <all>
            <filter id="round-0"/>
            <match-running/>
        </all>
    </after>
    <all id="team-one-own-goal">
        <team>team-one</team>
        <variable var="scoring_team">1</variable>
        <filter id="after-round-0"/>
        <match-running/>
    </all>
    <all id="team-two-own-goal">
        <team>team-two</team>
        <variable var="scoring_team">2</variable>
        <filter id="after-round-0"/>
        <match-running/>
    </all>
    <all id="team-one-enemy-goal">
        <team>team-one</team>
        <variable var="scoring_team">2</variable>
        <filter id="after-round-0"/>
        <match-running/>
    </all>
    <all id="team-two-enemy-goal">
        <team>team-two</team>
        <variable var="scoring_team">1</variable>
        <filter id="after-round-0"/>
        <match-running/>
    </all>
    <all id="cant-score-obs">
        <filter id="cant-score"/>
        <filter id="after-round-1"/>
        <observing/>
        <match-running/>
    </all>
    <players id="instaheal-min" min="${instaheal-required}">
        <always/>
    </players>
</filters>
<actions>
    <action id="give-main-kit" scope="player">
        <kit id="${main-kit}"/>
        <kit id="${armor-kit}"/>
        <action id="apply-heal"/>
    </action>
    <action id="snowball-thrown" scope="player">
        <set var="player_state" value="${throw}"/>
        <set var="game_state" value="${throw}"/>
        <set var="flag_carrier" value="0"/>
        <switch-scope inner="match" outer="player">
            <message text="`e⚠ {player} `6threw the `c`lFootball`6!`r" actionbar="`l{player} `6threw!">
                <replacements>
                    <player id="player" var="flag_carrier"/>
                </replacements>
            </message>
            <action id="throw-sounds"/>
        </switch-scope>
    </action>
    <action id="reset-kit-after-throw" scope="player" filter="player_state=${throw}">
        <set var="player_state" value="${initial}"/>
    </action>
    <action id="throw-sounds" scope="match">
        <sound key="${entity.snowball.throw}" volume="1" pitch="0.5"/>
        <sound key="${entity.snowball.throw}" volume="1" pitch="0.6"/>
        <sound key="${entity.snowball.throw}" volume="1" pitch="0.7"/>
        <sound key="${entity.firework_rocket.launch}" volume="1" pitch=".5"/>
    </action>
    <action id="pickup-sounds" scope="match">
        <sound key="${entity.firework_rocket.launch}" volume="1" pitch="1"/>
        <sound key="${entity.firework_rocket.launch}" volume="1" pitch=".9"/>
        <sound key="${entity.firework_rocket.launch}" volume="1" pitch=".8"/>
    </action>
    <action id="catch-sounds" scope="match">
        <sound key="${block.slime_block.break}" volume="1" pitch="1"/>
        <sound key="${block.slime_block.break}" volume="1" pitch="0.9"/>
        <sound key="${block.slime_block.break}" volume="1" pitch="0.8"/>
        <sound key="${block.note_block.snare}" volume="0.5" pitch="1.2"/>
        <sound key="${entity.experience_orb.pickup}" volume="0.7" pitch="1.5"/>
        <sound key="${entity.experience_orb.pickup}" volume="0.6" pitch="1"/>
        <sound key="${block.portal.travel}" volume="0.1" pitch="1.5"/>
    </action>
    <action id="flag-fire" scope="match">
        <fill region="flag-post" material="${fire-material}"/>
        <set var="do_fire" value="0"/>
    </action>
    <action id="reset-fire" scope="match">
        <fill region="flag-post" material="air"/>
    </action>
    <action id="pickup-flag" scope="player" filter="all(can_score=1,not(game_state=${throw}))">
        <pickup-flag flag="flag"/>
    </action>
    <action id="flag-pickup-event" scope="player" filter="game_state=${initial}">
        <set var="player_state" value="${carry}"/>
        <set var="flag_carrier" value="1"/>
        <sound key="${entity.player.levelup}" volume="0.7" pitch="1.5"/>
        <action id="apply-heal"/>
        <switch-scope inner="match" outer="player">
            <message text="`e⚠ {player} `6picked up the `c`lFlag`6!`r" actionbar="`l{player} `6picked up!">
                <replacements>
                    <player id="player" var="flag_carrier"/>
                </replacements>
            </message>
            <action id="pickup-sounds"/>
            <set var="game_state" value="${carry}"/>
            <set var="do_fire" value="1"/>
            <fill region="flag-post" material="air"/>
            <fill region="flag-indicator-upper" material="air"/>
            <fill region="flag-indicator-lower" material="air"/>
        </switch-scope>
    </action>
    <action id="touchdown-sound" scope="match">
        <!-- Early twinkle sound in endzone to keep game feel tight, replaced after 0.1s by new twinkle at spawn -->
        <sound key="${entity.firework_rocket.twinkle}" volume="1" pitch="1"/>
    </action>
    <action id="carrier-died-event" scope="player" filter="died-carrying">
        <set var="player_state" value="${initial}"/>
        <set var="game_state" value="${death}"/>
        <set var="flag_carrier" value="0"/>
        <switch-scope inner="match" outer="player">
            <message text="`aThe Flag carrier died!" actionbar="`aFlag carrier died!"/>
        </switch-scope>
    </action>
    <action id="reset-flag-message-send" scope="match">
        <message text="`e⚠ `6The `c`lFlag`6 was `c`lReset`6!" actionbar="`c`lThe Flag was Reset!"/>
        <sound key="${entity.firework_rocket.twinkle}" volume="1" pitch="1"/>
        <sound key="${entity.item.pickup}" volume="0.5" pitch="1.5"/>
    </action>
    <action id="reset-flag" scope="match">
        <!-- I think this makes more sense to be called reset-arena -->
        <set var="game_state" value="${initial}"/>
        <switch-scope inner="player">
            <set var="player_state" value="${initial}"/>
        </switch-scope>
        <fill region="flag-indicator-upper" material="${indicator-outer-material}"/>
        <fill region="flag-indicator-lower" material="${indicator-outer-material}"/>
        <if constant="inner-indicator-materials" constant-value="true">
            <fill region="flag-indicator-upper-inner" material="${indicator-inner-material}"/>
            <fill region="flag-indicator-lower-inner" material="${indicator-inner-material}"/>
        </if>
        <kill-entities filter="snowball-entity"/>
    </action>
    <action id="flag-receive-event" scope="player" filter="valid-receive">
        <set var="player_state" value="${carry}"/>
        <set var="game_state" value="${carry}"/>
        <set var="flag_carrier" value="1"/>
        <action id="pickup-flag"/>
        <action id="apply-heal"/>
        <sound key="${entity.player.levelup}" volume="0.7" pitch="1.5"/>
        <switch-scope inner="match" outer="player">
            <message text="`e⚠ {player} `6caught the `c`lFootball`6!`r" actionbar="`l{player} `6caught!">
                <replacements>
                    <player id="player" var="flag_carrier"/>
                </replacements>
            </message>
            <action id="pickup-sounds"/>
            <action id="catch-sounds"/>
            <action id="flag-fire"/> <!-- Just in case -->
        </switch-scope>
    </action>
    <action id="flag-pass-event" scope="player" filter="valid-pass">
        <set var="player_state" value="${catch}"/>
        <action id="give-main-kit"/>
        <switch-scope inner="match" outer="player">
            <action id="flag-fire"/> <!-- Just in case -->
        </switch-scope>
    </action>
    <action id="flag-steal-event" filter="game_state=${carry}" scope="player">
        <set var="player_state" value="${carry}"/>
        <set var="game_state" value="${carry}"/>
        <set var="flag_carrier" value="1"/>
        <action id="pickup-flag"/>
        <action id="apply-heal"/>
        <switch-scope inner="match" outer="player">
            <message text="`e⚠ {player} `6stripped the `c`lFlag`6!`r" actionbar="`l{player} `6stripped!">
                <replacements>
                    <player id="player" var="flag_carrier"/>
                </replacements>
            </message>
            <action id="pickup-sounds"/>
        </switch-scope>
    </action>
    <action id="reset-player-state" scope="player">
        <set var="player_state" value="${initial}"/>
    </action>
    <action id="flag-entity-pickup-event" scope="player">
        <set var="game_state" value="${initial}"/>
        <action id="pickup-flag"/>
    </action>
    <action id="apply-heal" scope="player">
        <action filter="instaheal=0">
            <kit id="heal-gapple"/>
        </action>
        <action filter="instaheal=1">
            <kit id="heal-instant"/>
        </action>
    </action>
    <trigger action="reset-player-state" filter="player_state=${catch}" scope="player"/>
    <trigger action="reset-player-state" filter="reset-observer-variables" scope="player"/>
    <trigger action="flag-pickup-event" filter="all(has-flag,player_state=${initial})" scope="player"/>
    <trigger action="pickup-flag" filter="not(any(has-flag,nets))" scope="player"/>
    <trigger action="flag-entity-pickup-event" filter="all(flag-pickup-via-entity,not(player_state=${carry}))" scope="player"/>
    <trigger action="reset-fire" filter="just-before-reset" scope="match"/>
    <trigger action="reset-kit-after-throw" filter="flag-reset-after-throw" scope="player"/>
    <trigger action="reset-flag" filter="flag-reset-after-throw" scope="match"/>
    <trigger action="reset-flag-message-send" filter="flag-reset-after-throw" scope="match"/>
    <trigger action="reset-flag" filter="flag-reset-after-death" scope="match"/>
    <trigger action="reset-flag-message-send" filter="flag-reset-after-death" scope="match"/>
    <trigger action="reset-flag" filter="pre-round-reset" scope="match"/>
    <trigger action="reset-flag-message-send" filter="after-capture" scope="match"/>
    <trigger action="carrier-died-event" filter="died-carrying" scope="player"/>
    <trigger action="touchdown-sound" filter="all(can_score=0,not(match-finished))" scope="match"/>
    <trigger action="reset-flag" filter="match-started" scope="match"/>
    <trigger action="go-sounds" filter="match-start-delay" scope="match"/>
    <trigger action="give-main-kit" filter="player_state=${throw}" scope="player"/>
    <trigger action="flag-fire" filter="flag-fire-go" scope="match"/>
    <action id="increment-round" scope="player">
        <set var="player_score" value="player_score+1"/>
        <message text=" `e⚠ `aYou scored a touchdown!!"/>
        <message text=" `2You have scored `e{amount} `2touchdown(s) in this match.">
            <replacements>
                <decimal id="amount" value="player_score"/>
            </replacements>
        </message>
        <switch-scope outer="player" inner="match">
            <set var="can_score" value="0"/>
            <set var="round_status" value="1"/>
            <action id="reset-fire"/>
            <action id="set-buytime"/>
            <kill-entities filter="remove-entities"/>
        </switch-scope>
        <action id="tiebreaker-win"/>
        <action id="message-score-display-player"/>
    </action>
    <action id="set-buytime" scope="match">
        <set var="buytime" value="1"/>
    </action>
    <action id="create-cages" scope="match">
        <fill region="cages" material="stained glass" filter="not-barrier"/>
    </action>
    <action id="remove-cages" scope="match">
        <fill region="cages" material="air" filter="not-barrier"/>
        <set var="can_score" value="1"/>
        <set var="buytime" value="0"/>
        <action id="go-message"/>
    </action>
    <action id="reset-counter" scope="match">
        <set var="round_status" value="0"/>
    </action>
    <trigger filter="team-one-scored" action="increment-round" scope="player"/>
    <trigger filter="team-two-scored" action="increment-round" scope="player"/>
    <trigger filter="all(can_score=0,not(match-finished))" action="create-cages" scope="match"/>
    <trigger filter="cage-time" action="remove-cages" scope="match"/>
    <trigger filter="after-round-1" action="reset-counter" scope="match"/>
    <trigger filter="team-one" scope="player">
        <action scope="player">
            <set var="current_team" value="1"/>
        </action>
    </trigger>
    <trigger filter="team-two" scope="player">
        <action scope="player">
            <set var="current_team" value="2"/>
        </action>
    </trigger>
    <trigger filter="observing" scope="player">
        <action scope="player">
            <set var="current_team" value="0"/>
        </action>
    </trigger>
    <action id="message-own-scored" scope="player">
        <message text="`5# # # # # # # # # # # # # # # #"/>
        <message text="`5# #      `6» `6`lTOUCHDOWN! `6«`5    # #"/>
        <message text="`5# #    `aYour team scored!`5    # #"/>
        <action id="message-score-display-team-one"/>
        <action id="message-score-display-team-two"/>
        <message text="`5# # # # # # # # # # # # # # # #"/>
        <switch-scope outer="player" inner="match">
            <action id="goal-title"/>
        </switch-scope>
        <sound key="${block.portal.travel}" volume="0.2" pitch="2"/> <!-- OBJECTIVE_GOOD with lower volume -->
    </action>
    <action id="message-enemy-scored" scope="player">
        <message text="`5# # # # # # # # # # # # # # # #"/>
        <message text="`5# #      `6» `6`lTOUCHDOWN! `6«`5    # #"/>
        <message text="`5# #    `cThe enemy scored`5    # #"/>
        <action id="message-score-display-team-one"/>
        <action id="message-score-display-team-two"/>
        <message text="`5# # # # # # # # # # # # # # # #"/>
        <sound key="${entity.blaze.death}" volume="0.4" pitch="0.8"/> <!-- OBJECTIVE_BAD with lower volume -->
    </action>
    <action id="message-score-display-player" scope="player">
        <set var="goal_scorer" value="1"/>
        <switch-scope outer="player" inner="match">
            <message text=" `l» {player} `7takes it to the end zone!">
                <replacements>
                    <player id="player" var="goal_scorer"/>
                </replacements>
            </message>
        </switch-scope>
    </action>
    <action filter="team-one" id="message-score-display-team-one" scope="player">
        <message text="`5# #            `f{one-score}`6 `l－`r `f{two-score}`5            # #">
            <replacements>
                <decimal id="one-score" value="team_one_score"/>
                <decimal id="two-score" value="team_two_score"/>
            </replacements>
        </message>
    </action>
    <action filter="team-two" id="message-score-display-team-two" scope="player">
        <message text="`5# #            `f{two-score}`6 `l－`r `f{one-score}`5            # #">
            <replacements>
                <decimal id="one-score" value="team_one_score"/>
                <decimal id="two-score" value="team_two_score"/>
            </replacements>
        </message>
    </action>
    <action id="goal-title" scope="match">
        <message title="`f`lTOUCHDOWN!" subtitle="`7{player} takes it to the end zone!" fade-in="0.5" stay="3" fade-out="0.5">
            <replacements>
                <player id="player" var="goal_scorer"/>
            </replacements>
        </message>
    </action>
    <action id="go-sounds" scope="match">
        <!-- Based on The Nathan AirChime K5LA train horn, which happens to be in tune with PGM countdown sound -->
        <sound key="${block.note_block.pling}" volume=".5" pitch="0.841"/>
        <sound key="${block.note_block.pling}" volume=".5" pitch="1"/>
        <sound key="${block.note_block.pling}" volume=".5" pitch="1.122"/>
        <sound key="${block.note_block.pling}" volume=".5" pitch="1.335"/>
        <sound key="${block.note_block.pling}" volume=".5" pitch="1.682"/>
    </action>
    <action id="go-message" scope="match">
        <message title="`aGo!" fade-in="0.1" stay="0.7" fade-out="0.1"/>
        <action id="go-sounds"/>
    </action>
    <action id="message-reset-scoring-team" scope="match">
        <set var="scoring_team" value="0"/>
    </action>
    <trigger filter="after-round-0" action="message-reset-scoring-team" scope="match"/>
    <action id="message-obs-scored" scope="player">
        <message text="`5# # # # # # # # # # # # # # # #"/>
        <message text="`5# #      `6» `6`lTOUCHDOWN! `6«`5    # #"/>
        <message text="`5# #            `f{one-score}`6 `l－`r `f{two-score}`5            # #">
            <replacements>
                <decimal id="one-score" value="team_one_score"/>
                <decimal id="two-score" value="team_two_score"/>
            </replacements>
        </message>
        <message text="`5# # # # # # # # # # # # # # # #"/>
        <sound key="${entity.firework_rocket.twinkle}"/>
    </action>
    <trigger filter="team-one-own-goal" action="message-own-scored" scope="player"/>
    <trigger filter="team-two-own-goal" action="message-own-scored" scope="player"/>
    <trigger filter="team-one-enemy-goal" action="message-enemy-scored" scope="player"/>
    <trigger filter="team-two-enemy-goal" action="message-enemy-scored" scope="player"/>
    <trigger filter="cant-score-obs" action="message-obs-scored" scope="player"/>
    <action id="set-team-one" scope="player">
        <switch-scope outer="player" inner="match">
            <set var="scoring_team" value="1"/>
        </switch-scope>
    </action>
    <action id="set-team-two" scope="player">
        <switch-scope outer="player" inner="match">
            <set var="scoring_team" value="2"/>
        </switch-scope>
    </action>
    <trigger filter="team-one-scored" action="set-team-one" scope="player"/>
    <trigger filter="team-two-scored" action="set-team-two" scope="player"/>
    <!-- End match if overtime disabled (overtime=0) -->
    <trigger scope="match" filter="all(in-overtime,overtime=0)">
        <action>
            <set var="time_limit" value="0"/>
        </action>
    </trigger>
    <!-- End match on score in tiebreaker mode (overtime=2) -->
    <trigger scope="match" filter="all(in-overtime,overtime=2)">
        <action>
            <set var="time_limit" value="-10"/>
            <message text=" `e⚠ `b`lTIEBREAKER! `7First team to score `awins `7the match."/>
            <!-- If score/mercy limits are ever made into variables, change scores + those instead -->
        </action>
    </trigger>
    <action id="tiebreaker-win" scope="player" filter="all(in-overtime,overtime=2)">
        <unless constant="gridiron-engine" constant-value="true">
            <set var="team_score" value="${score-limit}"/>
        </unless>
        <if constant="gridiron-engine" constant-value="true">
            <switch-scope inner="match">
                <set var="time_limit" value="0"/>
            </switch-scope>
        </if>
    </action>
    <!-- Instaheal stuff -->
    <if constant="dynamic-instaheal" constant-value="true">
        <trigger filter="not(instaheal-min)" scope="match">
            <action>
                <message text=" `e⚠ `fDue to a lack of players, `6❤ `e`lGAPPLE`f healing will be used."/>
                <set var="instaheal" value="0"/>
            </action>
        </trigger>
        <trigger filter="instaheal-min" scope="match">
            <action>
                <message text=" `e⚠ `d❤ `c`lI`6`lN`e`lS`a`lT`b`lA`d`lH`c`lE`6`lA`e`lL`f is now active!"/>
                <set var="instaheal" value="1"/>
            </action>
        </trigger>
    </if>
    <if constant="dynamic-instaheal" constant-value="false">
        <if constant="enable-instaheal" constant-value="true">
            <trigger filter="always" scope="match">
                <action>
                    <set var="instaheal" value="1"/>
                </action>
            </trigger>
        </if>
    </if>
</actions>
<regions>
    <!-- Maps must define the portal regions and playing-field -->
    <union id="flag-posts">
        <block id="flag-post">${flag-post}</block>
        <if constant="team-flag-posts" constant-value="true">
            <block id="team-one-flag-post">${team-one-flag-post}</block>
            <block id="team-two-flag-post">${team-two-flag-post}</block>
        </if>
    </union>
    <union id="spawn-points">
        <point id="team-one-spawn">${team-one-spawn}</point>
        <point id="team-two-spawn">${team-two-spawn}</point>
    </union>
    <negative id="not-cages">
        <union id="cages">
            <cylinder id="team-one-spawn-cage" base="${team-one-spawn}" height="3" radius="3"/>
            <cylinder id="team-two-spawn-cage" base="${team-two-spawn}" height="3" radius="3"/>
        </union>
    </negative>
    <union id="nets">
        <region id="team-one-portal"/> <!-- Where team-two scores -->
        <region id="team-two-portal"/> <!-- Where team-one scores -->
    </union>
    <if constant="deny-endzone-entry" constant-value="true">
        <apply enter="deny(team-one)" region="team-one-portal" message="You may not enter your own goal!"/>
        <apply enter="deny(team-two)" region="team-two-portal" message="You may not enter your own goal!"/>
        <apply enter="has-flag" region="nets" message="You may not enter the goal without the Flag!"/>
    </if>
    <if constant="deny-block-interaction" constant-value="true">
        <apply block="never" use="never"/>
    </if>
</regions>
<portals sound="false" observers="never">
    <!-- Scoring -->
    <portal destination="team-one-spawn" forward="should-teleport" filter="team-one" yaw="@${team-one-yaw}" pitch="@${team-one-pitch}"/>
    <portal destination="team-two-spawn" forward="should-teleport" filter="team-two" yaw="@${team-two-yaw}" pitch="@${team-two-pitch}"/>
    <!-- Buytime -->
    <portal destination="team-one-spawn" filter="team-one-buytime" region="not-cages" yaw="@${team-one-yaw}" pitch="@${team-one-pitch}" sound="false"/>
    <portal destination="team-two-spawn" filter="team-two-buytime" region="not-cages" yaw="@${team-two-yaw}" pitch="@${team-two-pitch}" sound="false"/>
</portals>
<flags flag-proximity-metric="none" net-proximity-metric="none">
    <flag id="flag"
          name="Flag"
          color="${flag-color}"
          shared="true"
          pickup-kit="${flag-carrier-kit}"
          carry-kit="${flag-carrier-effects}"
          carry-message="`f`lYou are the `b`lFlag `f`lcarrier!"
          show-messages="false"
          show-effects="false">
        <post yaw="${flag-yaw}" respawn-time="${flag-respawn}" recover-time="0s" pickup-filter="any(flag-posts,all(player_state=${carry},alive),carrying-football)">
            <post id="default-post" respawn-filter="never">${flag-post}</post>
            <if constant="team-flag-posts" constant-value="true">
                <post id="team-one-post" respawn-filter="never">${team-one-flag-post}</post>
                <post id="team-two-post" respawn-filter="never">${team-two-flag-post}</post>
            </if>
        </post>
        <unless constant="team-flag-posts" constant-value="true">
            <net points="${score-points}" region="team-one-portal" capture-filter="team-two"/>
            <net points="${score-points}" region="team-two-portal" capture-filter="team-one"/>
        </unless>
        <if constant="team-flag-posts" constant-value="true">
            <net points="${score-points}" region="team-one-portal" capture-filter="team-two" post="team-two-post"/>
            <net points="${score-points}" region="team-two-portal" capture-filter="team-one" post="team-one-post"/>
        </if>
    </flag>
</flags>
<score display="${score-display}">
    <limit>${score-limit}</limit>
    <mercy>${mercy-limit}</mercy>
</score>
<kill-rewards>
    <kill-reward filter="victim-has-flag" action="flag-steal-event"/>
</kill-rewards>
<toolrepair>
    <tool>${melee-weapon}</tool>
</toolrepair>
<itemremove>
    <item>leather helmet</item>
    <item>leather chestplate</item>
    <item>leather leggings</item>
    <item>leather boots</item>
    <item>chainmail leggings</item>
    <item>iron boots</item>
    <item>${melee-weapon}</item>
    <item>banner</item>
    <item>golden apple</item>
</itemremove>
<disabledamage>
    <damage>fall</damage>
    <damage ally="true" enemy="false" other="false">entity attack</damage>
</disabledamage>
<damage attacker-action="flag-pass-event" victim-action="flag-receive-event"/>
<friendlyfire>on</friendlyfire>
<friendlyfirerefund>off</friendlyfirerefund>
<respawn delay="${respawn-timer}" auto="true"/>
<hunger>
    <depletion>off</depletion>
</hunger>
<gamerules>
    <naturalRegeneration>${natural-regeneration}</naturalRegeneration>
</gamerules>
</map>
